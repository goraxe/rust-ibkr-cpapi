/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IserverContractConidAlgosGet200ResponseInnerParametersInner {
    /// The algo parameter
    #[serde(rename = "id")]
    pub id: String,
    /// If true a value must be entered.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Descriptive name of the parameter.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Format of the parameter.
    #[serde(rename = "valueClassName")]
    pub value_class_name: ValueClassName,
    /// Smallest value, only applies to parameters with valueClassName=Double.
    #[serde(rename = "minValue", skip_serializing_if = "Option::is_none")]
    pub min_value: Option<f64>,
    /// Largest value, only applies to parameters with valueClassName=Double.
    #[serde(rename = "maxValue", skip_serializing_if = "Option::is_none")]
    pub max_value: Option<f64>,
    /// User configured preset for this parameter.
    #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<bool>,
    /// The list of choices
    #[serde(rename = "legalStrings", skip_serializing_if = "Option::is_none")]
    pub legal_strings: Option<String>,
    /// Detailed description of the parameter.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The order in UI, used when building dynamic UI so that more important parameters are presented first.
    #[serde(rename = "guiRank", skip_serializing_if = "Option::is_none")]
    pub gui_rank: Option<f64>,
    /// If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double.
    #[serde(rename = "priceMarketRule", skip_serializing_if = "Option::is_none")]
    pub price_market_rule: Option<bool>,
    /// The rules that UI should apply to algo parameters depending on chosen order type:  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type. 
    #[serde(rename = "enabledConditions", skip_serializing_if = "Option::is_none")]
    pub enabled_conditions: Option<EnabledConditions>,
}

impl IserverContractConidAlgosGet200ResponseInnerParametersInner {
    pub fn new(id: String, value_class_name: ValueClassName) -> IserverContractConidAlgosGet200ResponseInnerParametersInner {
        IserverContractConidAlgosGet200ResponseInnerParametersInner {
            id,
            required: None,
            name: None,
            value_class_name,
            min_value: None,
            max_value: None,
            default_value: None,
            legal_strings: None,
            description: None,
            gui_rank: None,
            price_market_rule: None,
            enabled_conditions: None,
        }
    }
}
/// Format of the parameter.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValueClassName {
    #[serde(rename = "double")]
    Double,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "time")]
    Time,
    #[serde(rename = "boolean")]
    Boolean,
}

impl Default for ValueClassName {
    fn default() -> ValueClassName {
        Self::Double
    }
}
/// The rules that UI should apply to algo parameters depending on chosen order type:  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EnabledConditions {
    #[serde(rename = "MKT:speedUp:=:no")]
    MktColonSpeedUpColonEqualColonNo,
    #[serde(rename = "LMT:strategyType:<>:empty")]
    LmtColonStrategyTypeColonLessThanGreaterThanColonEmpty,
    #[serde(rename = "MKT:strategyType:=:Marketable")]
    MktColonStrategyTypeColonEqualColonMarketable,
}

impl Default for EnabledConditions {
    fn default() -> EnabledConditions {
        Self::MktColonSpeedUpColonEqualColonNo
    }
}

