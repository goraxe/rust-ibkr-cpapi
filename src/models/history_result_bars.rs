/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoryResultBars {
    /// First price returned for bar value.
    #[serde(rename = "open", skip_serializing_if = "Option::is_none")]
    pub open: Option<f64>,
    /// Start Time in the format YYYYMMDD.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Start Time Value - Formatted in unix time in ms.
    #[serde(rename = "startTimeVal", skip_serializing_if = "Option::is_none")]
    pub start_time_val: Option<i32>,
    /// End Time in the format YYYYMMDD.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// End Time Value - Formatted in unix time in ms.
    #[serde(rename = "endTimeVal", skip_serializing_if = "Option::is_none")]
    pub end_time_val: Option<i32>,
    /// total number of data points.
    #[serde(rename = "points", skip_serializing_if = "Option::is_none")]
    pub points: Option<i32>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<models::HistoryResultBarsDataInner>>,
    /// If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed.
    #[serde(rename = "mktDataDelay", skip_serializing_if = "Option::is_none")]
    pub mkt_data_delay: Option<i32>,
}

impl HistoryResultBars {
    pub fn new() -> HistoryResultBars {
        HistoryResultBars {
            open: None,
            start_time: None,
            start_time_val: None,
            end_time: None,
            end_time_val: None,
            points: None,
            data: None,
            mkt_data_delay: None,
        }
    }
}

