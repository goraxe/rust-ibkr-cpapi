/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderStatus : contains all the details of an order
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderStatus {
    /// order sub-type
    #[serde(rename = "sub_type", skip_serializing_if = "Option::is_none")]
    pub sub_type: Option<String>,
    /// order request id
    #[serde(rename = "request_id", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// system generated order id, unique per account
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i32>,
    /// conid and exchange. Format supports conid or conid@exchange
    #[serde(rename = "conidex", skip_serializing_if = "Option::is_none")]
    pub conidex: Option<String>,
    /// Underlying symbol
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired 
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Format contract name
    #[serde(rename = "contract_description_1", skip_serializing_if = "Option::is_none")]
    pub contract_description_1: Option<String>,
    /// Trading Exchange or Venue
    #[serde(rename = "listing_exchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    #[serde(rename = "option_acct", skip_serializing_if = "Option::is_none")]
    pub option_acct: Option<String>,
    /// Contracts company name
    #[serde(rename = "company_name", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// Quantity updated
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Total quantity
    #[serde(rename = "total_size", skip_serializing_if = "Option::is_none")]
    pub total_size: Option<String>,
    /// Contract traded currency
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// account id
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// Types of orders
    #[serde(rename = "order_type", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<String>,
    /// Limit price
    #[serde(rename = "limit_price", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<String>,
    /// Stop price
    #[serde(rename = "stop_price", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<String>,
    /// Cumulative fill
    #[serde(rename = "cum_fill", skip_serializing_if = "Option::is_none")]
    pub cum_fill: Option<String>,
    /// *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                    Occurs most commonly if an exchange is closed. *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.                This could occur unexpectedly when IB or the destination has rejected the order. *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,               or if the order was to short a security and shares have not yet been located. 
    #[serde(rename = "order_status", skip_serializing_if = "Option::is_none")]
    pub order_status: Option<String>,
    /// Description of the order status
    #[serde(rename = "order_status_description", skip_serializing_if = "Option::is_none")]
    pub order_status_description: Option<String>,
    /// Time-in-Force - length of time order will continue working before it is canceled.
    #[serde(rename = "tif", skip_serializing_if = "Option::is_none")]
    pub tif: Option<String>,
    /// Foreground color in hex format
    #[serde(rename = "fg_color", skip_serializing_if = "Option::is_none")]
    pub fg_color: Option<String>,
    /// Background color in hex format
    #[serde(rename = "bg_color", skip_serializing_if = "Option::is_none")]
    pub bg_color: Option<String>,
    /// If true not allowed to modify order
    #[serde(rename = "order_not_editable", skip_serializing_if = "Option::is_none")]
    pub order_not_editable: Option<bool>,
    /// Fields that can be edited in escaped unicode characters
    #[serde(rename = "editable_fields", skip_serializing_if = "Option::is_none")]
    pub editable_fields: Option<String>,
    /// If true not allowed to cancel order
    #[serde(rename = "cannot_cancel_order", skip_serializing_if = "Option::is_none")]
    pub cannot_cancel_order: Option<bool>,
    /// If true order trades outside regular trading hours
    #[serde(rename = "outside_rth", skip_serializing_if = "Option::is_none")]
    pub outside_rth: Option<bool>,
    /// If true order is de-activated
    #[serde(rename = "deactivate_order", skip_serializing_if = "Option::is_none")]
    pub deactivate_order: Option<bool>,
    /// If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423
    #[serde(rename = "use_price_mgmt_algo", skip_serializing_if = "Option::is_none")]
    pub use_price_mgmt_algo: Option<bool>,
    /// Asset class
    #[serde(rename = "sec_type", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    /// List of available chart periods
    #[serde(rename = "available_chart_periods", skip_serializing_if = "Option::is_none")]
    pub available_chart_periods: Option<String>,
    /// Format description of order
    #[serde(rename = "order_description", skip_serializing_if = "Option::is_none")]
    pub order_description: Option<String>,
    /// order_description with the symbol
    #[serde(rename = "order_description_with_contract", skip_serializing_if = "Option::is_none")]
    pub order_description_with_contract: Option<String>,
    #[serde(rename = "alert_active", skip_serializing_if = "Option::is_none")]
    pub alert_active: Option<i32>,
    /// type of the child order
    #[serde(rename = "child_order_type", skip_serializing_if = "Option::is_none")]
    pub child_order_type: Option<String>,
    /// Format fillQuantity\\totalQuantity
    #[serde(rename = "size_and_fills", skip_serializing_if = "Option::is_none")]
    pub size_and_fills: Option<String>,
    /// Position display price
    #[serde(rename = "exit_strategy_display_price", skip_serializing_if = "Option::is_none")]
    pub exit_strategy_display_price: Option<String>,
    /// Position description to display on chart
    #[serde(rename = "exit_strategy_chart_description", skip_serializing_if = "Option::is_none")]
    pub exit_strategy_chart_description: Option<String>,
    /// * 1: If your account has position or order for contract * 0: If your account has no position or order for contract 
    #[serde(rename = "exit_strategy_tool_availability", skip_serializing_if = "Option::is_none")]
    pub exit_strategy_tool_availability: Option<ExitStrategyToolAvailability>,
    /// Returns true if contract supports duplicate/opposite side order.
    #[serde(rename = "allowed_duplicate_opposite", skip_serializing_if = "Option::is_none")]
    pub allowed_duplicate_opposite: Option<bool>,
    /// Time of status update in unix time
    #[serde(rename = "order_time", skip_serializing_if = "Option::is_none")]
    pub order_time: Option<String>,
    /// only exists for oca orders, oca orders in same group will have same id
    #[serde(rename = "oca_group_id", skip_serializing_if = "Option::is_none")]
    pub oca_group_id: Option<String>,
}

impl OrderStatus {
    /// contains all the details of an order
    pub fn new() -> OrderStatus {
        OrderStatus {
            sub_type: None,
            request_id: None,
            order_id: None,
            conidex: None,
            symbol: None,
            side: None,
            contract_description_1: None,
            listing_exchange: None,
            option_acct: None,
            company_name: None,
            size: None,
            total_size: None,
            currency: None,
            account: None,
            order_type: None,
            limit_price: None,
            stop_price: None,
            cum_fill: None,
            order_status: None,
            order_status_description: None,
            tif: None,
            fg_color: None,
            bg_color: None,
            order_not_editable: None,
            editable_fields: None,
            cannot_cancel_order: None,
            outside_rth: None,
            deactivate_order: None,
            use_price_mgmt_algo: None,
            sec_type: None,
            available_chart_periods: None,
            order_description: None,
            order_description_with_contract: None,
            alert_active: None,
            child_order_type: None,
            size_and_fills: None,
            exit_strategy_display_price: None,
            exit_strategy_chart_description: None,
            exit_strategy_tool_availability: None,
            allowed_duplicate_opposite: None,
            order_time: None,
            oca_group_id: None,
        }
    }
}
/// The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "B")]
    B,
    #[serde(rename = "S")]
    S,
    #[serde(rename = "X")]
    X,
}

impl Default for Side {
    fn default() -> Side {
        Self::B
    }
}
/// * 1: If your account has position or order for contract * 0: If your account has no position or order for contract 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExitStrategyToolAvailability {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "0")]
    Variant0,
}

impl Default for ExitStrategyToolAvailability {
    fn default() -> ExitStrategyToolAvailability {
        Self::Variant1
    }
}

