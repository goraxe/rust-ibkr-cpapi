/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScannerParams {
    /// Contains an instrument, which to scan for. For example - \"STK\"
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// Specify the scan type to use. For example - \"MOST_ACTIVE_USD\"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Contains location code, where to look for specified instrument. For example - \"STK.US.MAJOR\"
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Contains list of filters supported for the scanner
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<models::ScannerParamsFilterInner>>,
}

impl ScannerParams {
    pub fn new() -> ScannerParams {
        ScannerParams {
            instrument: None,
            r#type: None,
            location: None,
            filter: None,
        }
    }
}

