/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    /// execution identifier for the order
    #[serde(rename = "execution_id", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// Underlying Symbol
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired 
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Formatted description of the order \"%side% %size% @ %price% on %exchange%\".
    #[serde(rename = "order_description", skip_serializing_if = "Option::is_none")]
    pub order_description: Option<String>,
    /// Time of Status update in format \"YYYYMMDD-hh:mm:ss\".
    #[serde(rename = "trade_time", skip_serializing_if = "Option::is_none")]
    pub trade_time: Option<String>,
    /// Time of status update in format unix time.
    #[serde(rename = "trade_time_r", skip_serializing_if = "Option::is_none")]
    pub trade_time_r: Option<f64>,
    /// Quantity of the order
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Average Price
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.
    #[serde(rename = "order_ref", skip_serializing_if = "Option::is_none")]
    pub order_ref: Option<String>,
    /// User that submitted order
    #[serde(rename = "submitter", skip_serializing_if = "Option::is_none")]
    pub submitter: Option<String>,
    /// Exchange or venue of order
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Commission of the order
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<f64>,
    /// Net cost of the order, including contract multiplier and quantity.
    #[serde(rename = "net_amount", skip_serializing_if = "Option::is_none")]
    pub net_amount: Option<f64>,
    /// accountCode
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// Account Number
    #[serde(rename = "acountCode", skip_serializing_if = "Option::is_none")]
    pub acount_code: Option<String>,
    /// Contracts company name
    #[serde(rename = "company_name", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// Format contract name
    #[serde(rename = "contract_description_1", skip_serializing_if = "Option::is_none")]
    pub contract_description_1: Option<String>,
    /// Asset class
    #[serde(rename = "sec_type", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    /// IBKR's contract identifier
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<String>,
    /// conid and exchange. Format supports conid or conid@exchange
    #[serde(rename = "conidex", skip_serializing_if = "Option::is_none")]
    pub conidex: Option<String>,
    /// Total quantity owned for this contract
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<String>,
    /// Firm which will settle the trade. For IBExecution customers only.
    #[serde(rename = "clearing_id", skip_serializing_if = "Option::is_none")]
    pub clearing_id: Option<String>,
    /// Specifies the true beneficiary of the order. For IBExecution customers only.
    #[serde(rename = "clearing_name", skip_serializing_if = "Option::is_none")]
    pub clearing_name: Option<String>,
    /// If order adds liquidity to the market.
    #[serde(rename = "liquidation_trade", skip_serializing_if = "Option::is_none")]
    pub liquidation_trade: Option<f64>,
}

impl Trade {
    pub fn new() -> Trade {
        Trade {
            execution_id: None,
            symbol: None,
            side: None,
            order_description: None,
            trade_time: None,
            trade_time_r: None,
            size: None,
            price: None,
            order_ref: None,
            submitter: None,
            exchange: None,
            commission: None,
            net_amount: None,
            account: None,
            acount_code: None,
            company_name: None,
            contract_description_1: None,
            sec_type: None,
            conid: None,
            conidex: None,
            position: None,
            clearing_id: None,
            clearing_name: None,
            liquidation_trade: None,
        }
    }
}
/// The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "B")]
    B,
    #[serde(rename = "S")]
    S,
    #[serde(rename = "X")]
    X,
}

impl Default for Side {
    fn default() -> Side {
        Self::B
    }
}

