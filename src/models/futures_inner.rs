/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FuturesInner : future contract information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FuturesInner {
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// conid of the future contract
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<i32>,
    #[serde(rename = "underlyingConid", skip_serializing_if = "Option::is_none")]
    pub underlying_conid: Option<i32>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    /// last trading day
    #[serde(rename = "ltd", skip_serializing_if = "Option::is_none")]
    pub ltd: Option<String>,
}

impl FuturesInner {
    /// future contract information
    pub fn new() -> FuturesInner {
        FuturesInner {
            symbol: None,
            conid: None,
            underlying_conid: None,
            expiration_date: None,
            ltd: None,
        }
    }
}

