/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderData {
    #[serde(rename = "clientOrderId", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    #[serde(rename = "execId", skip_serializing_if = "Option::is_none")]
    pub exec_id: Option<String>,
    #[serde(rename = "execType", skip_serializing_if = "Option::is_none")]
    pub exec_type: Option<ExecType>,
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<OrderType>,
    #[serde(rename = "orderStatus", skip_serializing_if = "Option::is_none")]
    pub order_status: Option<OrderStatus>,
    /// Underlying symbol for contract
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Quantity of active order
    #[serde(rename = "orderQty", skip_serializing_if = "Option::is_none")]
    pub order_qty: Option<String>,
    /// Price of active order
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// Quantity of the last partial fill
    #[serde(rename = "lastShares", skip_serializing_if = "Option::is_none")]
    pub last_shares: Option<String>,
    /// Price of the last partial fill
    #[serde(rename = "lastPrice", skip_serializing_if = "Option::is_none")]
    pub last_price: Option<String>,
    /// Cumulative fill quantity
    #[serde(rename = "cumQty", skip_serializing_if = "Option::is_none")]
    pub cum_qty: Option<String>,
    /// Remaining quantity to be filled
    #[serde(rename = "leavesQty", skip_serializing_if = "Option::is_none")]
    pub leaves_qty: Option<String>,
    /// Average fill price
    #[serde(rename = "avgPrice", skip_serializing_if = "Option::is_none")]
    pub avg_price: Option<String>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Order identifier
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Account number
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// Contracts asset class
    #[serde(rename = "secType", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<SecType>,
    /// Time of transaction in GMT, format YYYYMMDD-hh:m:ss
    #[serde(rename = "txTime", skip_serializing_if = "Option::is_none")]
    pub tx_time: Option<String>,
    /// Time of receipt in GMT, format YYYYMMDD-hh:mm:ss
    #[serde(rename = "rcptTime", skip_serializing_if = "Option::is_none")]
    pub rcpt_time: Option<String>,
    /// Time in Force
    #[serde(rename = "tif", skip_serializing_if = "Option::is_none")]
    pub tif: Option<Tif>,
    /// Contract identifier from IBKR's database.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<String>,
    /// Trading currency
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Exchange or venue
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Listing Exchange
    #[serde(rename = "listingExchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// error message
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<f64>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Box<models::OrderDataWarnings>>,
    /// Commission currency
    #[serde(rename = "commCurr", skip_serializing_if = "Option::is_none")]
    pub comm_curr: Option<String>,
    /// Commissions
    #[serde(rename = "comms", skip_serializing_if = "Option::is_none")]
    pub comms: Option<String>,
    /// Realized PnL
    #[serde(rename = "realizedPnl", skip_serializing_if = "Option::is_none")]
    pub realized_pnl: Option<String>,
}

impl OrderData {
    pub fn new() -> OrderData {
        OrderData {
            client_order_id: None,
            exec_id: None,
            exec_type: None,
            order_type: None,
            order_status: None,
            symbol: None,
            order_qty: None,
            price: None,
            last_shares: None,
            last_price: None,
            cum_qty: None,
            leaves_qty: None,
            avg_price: None,
            side: None,
            order_id: None,
            account: None,
            sec_type: None,
            tx_time: None,
            rcpt_time: None,
            tif: None,
            conid: None,
            currency: None,
            exchange: None,
            listing_exchange: None,
            text: None,
            warnings: None,
            comm_curr: None,
            comms: None,
            realized_pnl: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExecType {
    #[serde(rename = "-1 \"Invalid\"")]
    Variant1DoubleQuoteInvalidDoubleQuote,
    #[serde(rename = "0 \"New\"")]
    Variant0DoubleQuoteNewDoubleQuote,
    #[serde(rename = "1 \"Partially Filled\"")]
    Variant1DoubleQuotePartiallyFilledDoubleQuote,
    #[serde(rename = "2 \"Filled\"")]
    Variant2DoubleQuoteFilledDoubleQuote,
    #[serde(rename = "3 \"Done for the Day\"")]
    Variant3DoubleQuoteDoneForTheDayDoubleQuote,
    #[serde(rename = "4 \"Canceled\"")]
    Variant4DoubleQuoteCanceledDoubleQuote,
    #[serde(rename = "5 \"Replaced\"")]
    Variant5DoubleQuoteReplacedDoubleQuote,
    #[serde(rename = "6 \"Pending Cancel\"")]
    Variant6DoubleQuotePendingCancelDoubleQuote,
    #[serde(rename = "7 \"Stopped\"")]
    Variant7DoubleQuoteStoppedDoubleQuote,
    #[serde(rename = "8 \"Rejected\"")]
    Variant8DoubleQuoteRejectedDoubleQuote,
    #[serde(rename = "9 \"Suspended\"")]
    Variant9DoubleQuoteSuspendedDoubleQuote,
    #[serde(rename = "A \"Pending New\"")]
    ADoubleQuotePendingNewDoubleQuote,
    #[serde(rename = "B \"Calculated\"")]
    BDoubleQuoteCalculatedDoubleQuote,
    #[serde(rename = "C \"Expired\"")]
    CDoubleQuoteExpiredDoubleQuote,
    #[serde(rename = "D \"Restated\"")]
    DDoubleQuoteRestatedDoubleQuote,
    #[serde(rename = "E \"Pending Replace\"")]
    EDoubleQuotePendingReplaceDoubleQuote,
    #[serde(rename = "F \"Trade\"")]
    FDoubleQuoteTradeDoubleQuote,
    #[serde(rename = "G \"Trade Correct\"")]
    GDoubleQuoteTradeCorrectDoubleQuote,
    #[serde(rename = "H \"Trade Cancel\"")]
    HDoubleQuoteTradeCancelDoubleQuote,
    #[serde(rename = "I \"Order Status\"")]
    IDoubleQuoteOrderStatusDoubleQuote,
}

impl Default for ExecType {
    fn default() -> ExecType {
        Self::Variant1DoubleQuoteInvalidDoubleQuote
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "1 \"Market\"")]
    Variant1DoubleQuoteMarketDoubleQuote,
    #[serde(rename = "2 \"Limit\"")]
    Variant2DoubleQuoteLimitDoubleQuote,
    #[serde(rename = "3 \"Stop\"")]
    Variant3DoubleQuoteStopDoubleQuote,
    #[serde(rename = "4 \"Stop Limit\"")]
    Variant4DoubleQuoteStopLimitDoubleQuote,
    #[serde(rename = "5 \"Market on Close\"")]
    Variant5DoubleQuoteMarketOnCloseDoubleQuote,
    #[serde(rename = "6 \"With or Without\"")]
    Variant6DoubleQuoteWithOrWithoutDoubleQuote,
    #[serde(rename = "7 \"Limit or Better\"")]
    Variant7DoubleQuoteLimitOrBetterDoubleQuote,
    #[serde(rename = "8 \"Limit With or Without\"")]
    Variant8DoubleQuoteLimitWithOrWithoutDoubleQuote,
    #[serde(rename = "9 \"On Basis\"")]
    Variant9DoubleQuoteOnBasisDoubleQuote,
    #[serde(rename = "A \"On Close\"")]
    ADoubleQuoteOnCloseDoubleQuote,
    #[serde(rename = "B \"Limit On Close\"")]
    BDoubleQuoteLimitOnCloseDoubleQuote,
    #[serde(rename = "C \"Forex Market\"")]
    CDoubleQuoteForexMarketDoubleQuote,
    #[serde(rename = "D \"Previously Quoted\"")]
    DDoubleQuotePreviouslyQuotedDoubleQuote,
    #[serde(rename = "E \"Previously Indicated\"")]
    EDoubleQuotePreviouslyIndicatedDoubleQuote,
    #[serde(rename = "F \"Forex Limit\"")]
    FDoubleQuoteForexLimitDoubleQuote,
    #[serde(rename = "G \"Forex Swap\"")]
    GDoubleQuoteForexSwapDoubleQuote,
    #[serde(rename = "H \"Forex Previously Quoted\"")]
    HDoubleQuoteForexPreviouslyQuotedDoubleQuote,
    #[serde(rename = "I \"Funari\"")]
    IDoubleQuoteFunariDoubleQuote,
    #[serde(rename = "K \"Market To Limit\"")]
    KDoubleQuoteMarketToLimitDoubleQuote,
    #[serde(rename = "P \"Pegged\"")]
    PDoubleQuotePeggedDoubleQuote,
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Variant1DoubleQuoteMarketDoubleQuote
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderStatus {
    #[serde(rename = "-1 \"Invalid Order Status\"")]
    Variant1DoubleQuoteInvalidOrderStatusDoubleQuote,
    #[serde(rename = "0 \"New\"")]
    Variant0DoubleQuoteNewDoubleQuote,
    #[serde(rename = "1 \"Partially Filled\"")]
    Variant1DoubleQuotePartiallyFilledDoubleQuote,
    #[serde(rename = "2 \"Filled\"")]
    Variant2DoubleQuoteFilledDoubleQuote,
    #[serde(rename = "3 \"Done for the Day\"")]
    Variant3DoubleQuoteDoneForTheDayDoubleQuote,
    #[serde(rename = "4 \"Canceled\"")]
    Variant4DoubleQuoteCanceledDoubleQuote,
    #[serde(rename = "5 \"Replaced\"")]
    Variant5DoubleQuoteReplacedDoubleQuote,
    #[serde(rename = "6 \"Pending Cancel\"")]
    Variant6DoubleQuotePendingCancelDoubleQuote,
    #[serde(rename = "7 \"Stopped\"")]
    Variant7DoubleQuoteStoppedDoubleQuote,
    #[serde(rename = "8 \"Rejected\"")]
    Variant8DoubleQuoteRejectedDoubleQuote,
    #[serde(rename = "9 \"Suspended\"")]
    Variant9DoubleQuoteSuspendedDoubleQuote,
    #[serde(rename = "A \"Pending New\"")]
    ADoubleQuotePendingNewDoubleQuote,
    #[serde(rename = "B \"Calculated\"")]
    BDoubleQuoteCalculatedDoubleQuote,
    #[serde(rename = "C \"Expired\"")]
    CDoubleQuoteExpiredDoubleQuote,
    #[serde(rename = "D \"Restated\"")]
    DDoubleQuoteRestatedDoubleQuote,
    #[serde(rename = "E \"Pending Replace\"")]
    EDoubleQuotePendingReplaceDoubleQuote,
}

impl Default for OrderStatus {
    fn default() -> OrderStatus {
        Self::Variant1DoubleQuoteInvalidOrderStatusDoubleQuote
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "1 \"Buy\"")]
    Variant1DoubleQuoteBuyDoubleQuote,
    #[serde(rename = "2 \"Sell\"")]
    Variant2DoubleQuoteSellDoubleQuote,
    #[serde(rename = "3 \"Buy Minus\"")]
    Variant3DoubleQuoteBuyMinusDoubleQuote,
    #[serde(rename = "4 \"Sell Plus\"")]
    Variant4DoubleQuoteSellPlusDoubleQuote,
    #[serde(rename = "5 \"Sell Short\"")]
    Variant5DoubleQuoteSellShortDoubleQuote,
    #[serde(rename = "6 \"Sell Short Exempt\"")]
    Variant6DoubleQuoteSellShortExemptDoubleQuote,
}

impl Default for Side {
    fn default() -> Side {
        Self::Variant1DoubleQuoteBuyDoubleQuote
    }
}
/// Contracts asset class
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecType {
    #[serde(rename = "CS \"Stock\"")]
    CsDoubleQuoteStockDoubleQuote,
    #[serde(rename = "CASH \"Forex\"")]
    CashDoubleQuoteForexDoubleQuote,
    #[serde(rename = "CFD \"Contract for Difference\"")]
    CfdDoubleQuoteContractForDifferenceDoubleQuote,
    #[serde(rename = "FUT \"Future\"")]
    FutDoubleQuoteFutureDoubleQuote,
    #[serde(rename = "OPT \"Option\"")]
    OptDoubleQuoteOptionDoubleQuote,
}

impl Default for SecType {
    fn default() -> SecType {
        Self::CsDoubleQuoteStockDoubleQuote
    }
}
/// Time in Force
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tif {
    #[serde(rename = "0 \"Day\"")]
    Variant0DoubleQuoteDayDoubleQuote,
    #[serde(rename = "1 \"GTC\"")]
    Variant1DoubleQuoteGtcDoubleQuote,
    #[serde(rename = "2 \"At the Opening\"")]
    Variant2DoubleQuoteAtTheOpeningDoubleQuote,
}

impl Default for Tif {
    fn default() -> Tif {
        Self::Variant0DoubleQuoteDayDoubleQuote
    }
}

