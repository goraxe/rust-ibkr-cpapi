/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarketData {
    /// Last Price - The last price at which the contract traded. May contain one of the following prefixes:   * C - Previous day's closing price.   * H - Trading has halted. 
    #[serde(rename = "31", skip_serializing_if = "Option::is_none")]
    pub param_31: Option<String>,
    /// High - Current day high price
    #[serde(rename = "70", skip_serializing_if = "Option::is_none")]
    pub param_70: Option<f64>,
    /// Low - Current day low price
    #[serde(rename = "71", skip_serializing_if = "Option::is_none")]
    pub param_71: Option<f64>,
    /// Change - The difference between the last price and the close on the previous trading day
    #[serde(rename = "82", skip_serializing_if = "Option::is_none")]
    pub param_82: Option<String>,
    /// Change % - The difference between the last price and the close on the previous trading day in percentage.
    #[serde(rename = "83", skip_serializing_if = "Option::is_none")]
    pub param_83: Option<f64>,
    /// Bid Price - The highest-priced bid on the contract.
    #[serde(rename = "84", skip_serializing_if = "Option::is_none")]
    pub param_84: Option<String>,
    /// Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100.
    #[serde(rename = "85", skip_serializing_if = "Option::is_none")]
    pub param_85: Option<String>,
    /// Ask Price - The lowest-priced offer on the contract.
    #[serde(rename = "86", skip_serializing_if = "Option::is_none")]
    pub param_86: Option<String>,
    /// Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762.
    #[serde(rename = "87", skip_serializing_if = "Option::is_none")]
    pub param_87: Option<String>,
    /// Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100.
    #[serde(rename = "88", skip_serializing_if = "Option::is_none")]
    pub param_88: Option<String>,
    /// Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed, Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated. Third char defines: B = Book   * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.   * Delayed - Data is relayed back 15-20 min delayed.   * Frozen - Last recorded data at market close, relayed back in real time.   * Frozen Delayed - Last recorded data at market close, relayed back delayed.   * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.   * Snapshot - Snapshot request is available for contract.   * Consolidated - Market data is aggregated across multiple exchanges or venues.   * Book - Top of the book data is available for contract. 
    #[serde(rename = "6509", skip_serializing_if = "Option::is_none")]
    pub param_6509: Option<String>,
    /// Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY
    #[serde(rename = "7057", skip_serializing_if = "Option::is_none")]
    pub param_7057: Option<String>,
    /// Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY
    #[serde(rename = "7058", skip_serializing_if = "Option::is_none")]
    pub param_7058: Option<String>,
    /// Last Size - The number of unites traded at the last price
    #[serde(rename = "7059", skip_serializing_if = "Option::is_none")]
    pub param_7059: Option<f64>,
    /// Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY
    #[serde(rename = "7068", skip_serializing_if = "Option::is_none")]
    pub param_7068: Option<String>,
    /// IV Rank
    #[serde(rename = "7195", skip_serializing_if = "Option::is_none")]
    pub param_7195: Option<String>,
    /// IV Rank
    #[serde(rename = "7196", skip_serializing_if = "Option::is_none")]
    pub param_7196: Option<String>,
    /// IV Rank
    #[serde(rename = "7197", skip_serializing_if = "Option::is_none")]
    pub param_7197: Option<String>,
    /// IV Percentile
    #[serde(rename = "7198", skip_serializing_if = "Option::is_none")]
    pub param_7198: Option<String>,
    /// IV Percentile
    #[serde(rename = "7199", skip_serializing_if = "Option::is_none")]
    pub param_7199: Option<String>,
    /// IV Percentile
    #[serde(rename = "7200", skip_serializing_if = "Option::is_none")]
    pub param_7200: Option<String>,
    /// IV High Low
    #[serde(rename = "7201", skip_serializing_if = "Option::is_none")]
    pub param_7201: Option<String>,
    /// IV High Low
    #[serde(rename = "7202", skip_serializing_if = "Option::is_none")]
    pub param_7202: Option<String>,
    /// IV High Low
    #[serde(rename = "7203", skip_serializing_if = "Option::is_none")]
    pub param_7203: Option<String>,
    /// IV High Low
    #[serde(rename = "7204", skip_serializing_if = "Option::is_none")]
    pub param_7204: Option<String>,
    /// IV High Low
    #[serde(rename = "7205", skip_serializing_if = "Option::is_none")]
    pub param_7205: Option<String>,
    /// IV High Low
    #[serde(rename = "7206", skip_serializing_if = "Option::is_none")]
    pub param_7206: Option<String>,
    /// HV Rank
    #[serde(rename = "7207", skip_serializing_if = "Option::is_none")]
    pub param_7207: Option<String>,
    /// HV Rank
    #[serde(rename = "7208", skip_serializing_if = "Option::is_none")]
    pub param_7208: Option<String>,
    /// HV Rank
    #[serde(rename = "7209", skip_serializing_if = "Option::is_none")]
    pub param_7209: Option<String>,
    /// HV Percentile
    #[serde(rename = "7210", skip_serializing_if = "Option::is_none")]
    pub param_7210: Option<String>,
    /// HV Percentile
    #[serde(rename = "7211", skip_serializing_if = "Option::is_none")]
    pub param_7211: Option<String>,
    /// HV Percentile
    #[serde(rename = "7212", skip_serializing_if = "Option::is_none")]
    pub param_7212: Option<String>,
    /// HV High Low
    #[serde(rename = "7245", skip_serializing_if = "Option::is_none")]
    pub param_7245: Option<String>,
    /// HV High Low
    #[serde(rename = "7246", skip_serializing_if = "Option::is_none")]
    pub param_7246: Option<String>,
    /// HV High Low
    #[serde(rename = "7247", skip_serializing_if = "Option::is_none")]
    pub param_7247: Option<String>,
    /// HV High Low
    #[serde(rename = "7248", skip_serializing_if = "Option::is_none")]
    pub param_7248: Option<String>,
    /// HV High Low
    #[serde(rename = "7249", skip_serializing_if = "Option::is_none")]
    pub param_7249: Option<String>,
    /// HV High Low
    #[serde(rename = "7263", skip_serializing_if = "Option::is_none")]
    pub param_7263: Option<String>,
    /// ESG
    #[serde(rename = "7264", skip_serializing_if = "Option::is_none")]
    pub param_7264: Option<String>,
    /// ESG
    #[serde(rename = "7265", skip_serializing_if = "Option::is_none")]
    pub param_7265: Option<String>,
    /// ESG
    #[serde(rename = "7266", skip_serializing_if = "Option::is_none")]
    pub param_7266: Option<String>,
    /// ESG
    #[serde(rename = "7267", skip_serializing_if = "Option::is_none")]
    pub param_7267: Option<String>,
    /// ESG
    #[serde(rename = "7268", skip_serializing_if = "Option::is_none")]
    pub param_7268: Option<String>,
    /// ESG
    #[serde(rename = "7269", skip_serializing_if = "Option::is_none")]
    pub param_7269: Option<String>,
    /// ESG
    #[serde(rename = "7271", skip_serializing_if = "Option::is_none")]
    pub param_7271: Option<String>,
    /// ESG
    #[serde(rename = "7272", skip_serializing_if = "Option::is_none")]
    pub param_7272: Option<String>,
    /// ESG
    #[serde(rename = "7273", skip_serializing_if = "Option::is_none")]
    pub param_7273: Option<String>,
    /// ESG
    #[serde(rename = "7274", skip_serializing_if = "Option::is_none")]
    pub param_7274: Option<String>,
    /// ESG
    #[serde(rename = "7275", skip_serializing_if = "Option::is_none")]
    pub param_7275: Option<String>,
    /// ESG
    #[serde(rename = "7276", skip_serializing_if = "Option::is_none")]
    pub param_7276: Option<String>,
    /// ESG
    #[serde(rename = "7277", skip_serializing_if = "Option::is_none")]
    pub param_7277: Option<String>,
    /// Average Volume - The average daily trading volume over 90 days.
    #[serde(rename = "7282", skip_serializing_if = "Option::is_none")]
    pub param_7282: Option<String>,
    /// Option Implied Vol. % - A prediction of how volatile an underlying will be in the future. At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.      
    #[serde(rename = "7283", skip_serializing_if = "Option::is_none")]
    pub param_7283: Option<String>,
    /// Historic Volume (30d)
    #[serde(rename = "7284", skip_serializing_if = "Option::is_none")]
    pub param_7284: Option<String>,
    /// Dividend Amount - Displays the amount of the next dividend.
    #[serde(rename = "7286", skip_serializing_if = "Option::is_none")]
    pub param_7286: Option<f64>,
    /// Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage. For derivatives, this displays the total of the expected dividend payments over the expiry date. 
    #[serde(rename = "7287", skip_serializing_if = "Option::is_none")]
    pub param_7287: Option<String>,
    /// Ex-date of the dividend
    #[serde(rename = "7288", skip_serializing_if = "Option::is_none")]
    pub param_7288: Option<String>,
    /// Market Cap
    #[serde(rename = "7289", skip_serializing_if = "Option::is_none")]
    pub param_7289: Option<String>,
    /// P/E
    #[serde(rename = "7290", skip_serializing_if = "Option::is_none")]
    pub param_7290: Option<String>,
    /// 52 Week High - The highest price for the past 52 weeks.
    #[serde(rename = "7293", skip_serializing_if = "Option::is_none")]
    pub param_7293: Option<String>,
    /// 52 Week Low - The lowest price for the past 52 weeks.
    #[serde(rename = "7294", skip_serializing_if = "Option::is_none")]
    pub param_7294: Option<String>,
    /// Open - Today's opening price.
    #[serde(rename = "7295", skip_serializing_if = "Option::is_none")]
    pub param_7295: Option<f64>,
    /// Close - Today's closing price.
    #[serde(rename = "7296", skip_serializing_if = "Option::is_none")]
    pub param_7296: Option<f64>,
    /// Reuters Fundamentals
    #[serde(rename = "7331", skip_serializing_if = "Option::is_none")]
    pub param_7331: Option<String>,
    /// ESG
    #[serde(rename = "7370", skip_serializing_if = "Option::is_none")]
    pub param_7370: Option<String>,
    /// ESG
    #[serde(rename = "7371", skip_serializing_if = "Option::is_none")]
    pub param_7371: Option<String>,
    /// ESG
    #[serde(rename = "7372", skip_serializing_if = "Option::is_none")]
    pub param_7372: Option<String>,
    /// Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price
    #[serde(rename = "7635", skip_serializing_if = "Option::is_none")]
    pub param_7635: Option<String>,
    /// shortable invetory
    #[serde(rename = "7636", skip_serializing_if = "Option::is_none")]
    pub param_7636: Option<f64>,
    /// Fee rebate rate
    #[serde(rename = "7637", skip_serializing_if = "Option::is_none")]
    pub param_7637: Option<String>,
    /// Shortable - Describes the level of difficulty with which the security can be sold short.
    #[serde(rename = "7644", skip_serializing_if = "Option::is_none")]
    pub param_7644: Option<String>,
    /// EMA(200) - Exponential moving average (N=200).
    #[serde(rename = "7674", skip_serializing_if = "Option::is_none")]
    pub param_7674: Option<String>,
    /// EMA(100) - Exponential moving average (N=100).
    #[serde(rename = "7675", skip_serializing_if = "Option::is_none")]
    pub param_7675: Option<String>,
    /// EMA(50) - Exponential moving average (N=50).
    #[serde(rename = "7676", skip_serializing_if = "Option::is_none")]
    pub param_7676: Option<String>,
    /// EMA(20) - Exponential moving average (N=20).
    #[serde(rename = "7677", skip_serializing_if = "Option::is_none")]
    pub param_7677: Option<String>,
    /// Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents.
    #[serde(rename = "7681", skip_serializing_if = "Option::is_none")]
    pub param_7681: Option<String>,
    /// Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
    #[serde(rename = "7698", skip_serializing_if = "Option::is_none")]
    pub param_7698: Option<String>,
    /// Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
    #[serde(rename = "7699", skip_serializing_if = "Option::is_none")]
    pub param_7699: Option<String>,
    /// Beta - Beta is against standard index.
    #[serde(rename = "7718", skip_serializing_if = "Option::is_none")]
    pub param_7718: Option<String>,
    /// Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates. It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates. The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher. 
    #[serde(rename = "7720", skip_serializing_if = "Option::is_none")]
    pub param_7720: Option<String>,
    /// Reuters Fundamentals
    #[serde(rename = "7743", skip_serializing_if = "Option::is_none")]
    pub param_7743: Option<String>,
    /// ESG
    #[serde(rename = "7761", skip_serializing_if = "Option::is_none")]
    pub param_7761: Option<String>,
    /// 26 Week High - The highest price for the past 26 weeks.
    #[serde(rename = "7992", skip_serializing_if = "Option::is_none")]
    pub param_7992: Option<String>,
    /// 26 Week Low - The lowest price for the past 26 weeks.
    #[serde(rename = "7993", skip_serializing_if = "Option::is_none")]
    pub param_7993: Option<String>,
    /// 13 Week High - The highest price for the past 13 weeks.
    #[serde(rename = "7994", skip_serializing_if = "Option::is_none")]
    pub param_7994: Option<String>,
    /// 13 Week Low - The lowest price for the past 13 weeks.
    #[serde(rename = "7995", skip_serializing_if = "Option::is_none")]
    pub param_7995: Option<String>,
    /// IBKR Contract identifier
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<i32>,
    /// minimum price increment
    #[serde(rename = "minTick", skip_serializing_if = "Option::is_none")]
    pub min_tick: Option<f64>,
    /// Color for Best Bid/Offer Exchange in hex code
    #[serde(rename = "BboExchange", skip_serializing_if = "Option::is_none")]
    pub bbo_exchange: Option<String>,
    /// If market data field values return delayed
    #[serde(rename = "HasDelayed", skip_serializing_if = "Option::is_none")]
    pub has_delayed: Option<bool>,
    /// minimum size increment
    #[serde(rename = "sizeMinTick", skip_serializing_if = "Option::is_none")]
    pub size_min_tick: Option<i32>,
    #[serde(rename = "BestEligible", skip_serializing_if = "Option::is_none")]
    pub best_eligible: Option<i32>,
    #[serde(rename = "BestBidExch", skip_serializing_if = "Option::is_none")]
    pub best_bid_exch: Option<i32>,
    #[serde(rename = "BestAskExch", skip_serializing_if = "Option::is_none")]
    pub best_ask_exch: Option<i32>,
    #[serde(rename = "PreOpenBid", skip_serializing_if = "Option::is_none")]
    pub pre_open_bid: Option<i32>,
    #[serde(rename = "LastAttribs", skip_serializing_if = "Option::is_none")]
    pub last_attribs: Option<i32>,
    /// Base time stamp for last update in format YYYYMMDD
    #[serde(rename = "TimestampBase", skip_serializing_if = "Option::is_none")]
    pub timestamp_base: Option<i32>,
    #[serde(rename = "TimestampDelta", skip_serializing_if = "Option::is_none")]
    pub timestamp_delta: Option<i32>,
    #[serde(rename = "LastExch", skip_serializing_if = "Option::is_none")]
    pub last_exch: Option<i32>,
    #[serde(rename = "CloseAttribs", skip_serializing_if = "Option::is_none")]
    pub close_attribs: Option<i32>,
}

impl MarketData {
    pub fn new() -> MarketData {
        MarketData {
            param_31: None,
            param_70: None,
            param_71: None,
            param_82: None,
            param_83: None,
            param_84: None,
            param_85: None,
            param_86: None,
            param_87: None,
            param_88: None,
            param_6509: None,
            param_7057: None,
            param_7058: None,
            param_7059: None,
            param_7068: None,
            param_7195: None,
            param_7196: None,
            param_7197: None,
            param_7198: None,
            param_7199: None,
            param_7200: None,
            param_7201: None,
            param_7202: None,
            param_7203: None,
            param_7204: None,
            param_7205: None,
            param_7206: None,
            param_7207: None,
            param_7208: None,
            param_7209: None,
            param_7210: None,
            param_7211: None,
            param_7212: None,
            param_7245: None,
            param_7246: None,
            param_7247: None,
            param_7248: None,
            param_7249: None,
            param_7263: None,
            param_7264: None,
            param_7265: None,
            param_7266: None,
            param_7267: None,
            param_7268: None,
            param_7269: None,
            param_7271: None,
            param_7272: None,
            param_7273: None,
            param_7274: None,
            param_7275: None,
            param_7276: None,
            param_7277: None,
            param_7282: None,
            param_7283: None,
            param_7284: None,
            param_7286: None,
            param_7287: None,
            param_7288: None,
            param_7289: None,
            param_7290: None,
            param_7293: None,
            param_7294: None,
            param_7295: None,
            param_7296: None,
            param_7331: None,
            param_7370: None,
            param_7371: None,
            param_7372: None,
            param_7635: None,
            param_7636: None,
            param_7637: None,
            param_7644: None,
            param_7674: None,
            param_7675: None,
            param_7676: None,
            param_7677: None,
            param_7681: None,
            param_7698: None,
            param_7699: None,
            param_7718: None,
            param_7720: None,
            param_7743: None,
            param_7761: None,
            param_7992: None,
            param_7993: None,
            param_7994: None,
            param_7995: None,
            conid: None,
            min_tick: None,
            bbo_exchange: None,
            has_delayed: None,
            size_min_tick: None,
            best_eligible: None,
            best_bid_exch: None,
            best_ask_exch: None,
            pre_open_bid: None,
            last_attribs: None,
            timestamp_base: None,
            timestamp_delta: None,
            last_exch: None,
            close_attribs: None,
        }
    }
}

