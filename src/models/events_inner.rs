/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventsInner {
    #[serde(rename = "index_date_type", skip_serializing_if = "Option::is_none")]
    pub index_date_type: Option<String>,
    #[serde(rename = "event_type", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    /// will be different for different event types
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "conids", skip_serializing_if = "Option::is_none")]
    pub conids: Option<Vec<String>>,
    /// for exmple 20180817T040000+0000
    #[serde(rename = "index_date", skip_serializing_if = "Option::is_none")]
    pub index_date: Option<String>,
    /// for example RSE
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// for example 11662135
    #[serde(rename = "event_key", skip_serializing_if = "Option::is_none")]
    pub event_key: Option<String>,
    #[serde(rename = "tooltips", skip_serializing_if = "Option::is_none")]
    pub tooltips: Option<serde_json::Value>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl EventsInner {
    pub fn new() -> EventsInner {
        EventsInner {
            index_date_type: None,
            event_type: None,
            data: None,
            conids: None,
            index_date: None,
            source: None,
            event_key: None,
            tooltips: None,
            status: None,
        }
    }
}

