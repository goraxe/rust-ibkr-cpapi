/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HmdsScannerPostRequest {
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    #[serde(rename = "locations", skip_serializing_if = "Option::is_none")]
    pub locations: Option<String>,
    #[serde(rename = "scanCode", skip_serializing_if = "Option::is_none")]
    pub scan_code: Option<String>,
    #[serde(rename = "secType", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::HmdsScannerPostRequestFiltersInner>>,
}

impl HmdsScannerPostRequest {
    pub fn new() -> HmdsScannerPostRequest {
        HmdsScannerPostRequest {
            instrument: None,
            locations: None,
            scan_code: None,
            sec_type: None,
            filters: None,
        }
    }
}

