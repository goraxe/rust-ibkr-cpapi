/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SecdefInner : security definition information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecdefInner {
    /// IBKR contract identifier.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<i32>,
    /// Currency contract trades in.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Defines if a derivative contract has a different currency.
    #[serde(rename = "crossCurrency", skip_serializing_if = "Option::is_none")]
    pub cross_currency: Option<bool>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i32>,
    /// HTML encoded company description in Chinese.
    #[serde(rename = "chineseName", skip_serializing_if = "Option::is_none")]
    pub chinese_name: Option<String>,
    /// List of exchanges and venues contract trades.
    #[serde(rename = "allExchanges", skip_serializing_if = "Option::is_none")]
    pub all_exchanges: Option<String>,
    /// Main trading venue.
    #[serde(rename = "listingExchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// Company Name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.
    #[serde(rename = "assetClass", skip_serializing_if = "Option::is_none")]
    pub asset_class: Option<String>,
    /// Specific data contract expires.
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,
    /// Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.
    #[serde(rename = "lastTradingDay", skip_serializing_if = "Option::is_none")]
    pub last_trading_day: Option<String>,
    /// Potential characteristic of each product.
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Defines the right to buy or sell of the underlying security.
    #[serde(rename = "putOrCall", skip_serializing_if = "Option::is_none")]
    pub put_or_call: Option<String>,
    /// The category of the economy.
    #[serde(rename = "sector", skip_serializing_if = "Option::is_none")]
    pub sector: Option<String>,
    /// Stock Group contract belongs too.
    #[serde(rename = "sectorGroup", skip_serializing_if = "Option::is_none")]
    pub sector_group: Option<String>,
    /// Set price at which a derivative contract can be bought or sold.
    #[serde(rename = "strike", skip_serializing_if = "Option::is_none")]
    pub strike: Option<f64>,
    /// Contract symbol.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Underlying contract identifier.
    #[serde(rename = "undConid", skip_serializing_if = "Option::is_none")]
    pub und_conid: Option<i32>,
    /// Multiplier for total premium paid or received for derivative contract.
    #[serde(rename = "multiplier", skip_serializing_if = "Option::is_none")]
    pub multiplier: Option<i32>,
    /// Stock type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Company name for underlying contract.
    #[serde(rename = "undComp", skip_serializing_if = "Option::is_none")]
    pub und_comp: Option<String>,
    /// IBKR Symbol for underlying contract.
    #[serde(rename = "undSym", skip_serializing_if = "Option::is_none")]
    pub und_sym: Option<String>,
    /// If contract has an option.
    #[serde(rename = "hasOptions", skip_serializing_if = "Option::is_none")]
    pub has_options: Option<bool>,
    /// Formatted company name with underlying symbol, expiration, strike, right.
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// If contract is a US contract. Currently supported for stocks, options and warrants.
    #[serde(rename = "isUS", skip_serializing_if = "Option::is_none")]
    pub is_us: Option<bool>,
    #[serde(rename = "incrementRules", skip_serializing_if = "Option::is_none")]
    pub increment_rules: Option<Box<models::SecdefInnerIncrementRules>>,
}

impl SecdefInner {
    /// security definition information.
    pub fn new() -> SecdefInner {
        SecdefInner {
            conid: None,
            currency: None,
            cross_currency: None,
            time: None,
            chinese_name: None,
            all_exchanges: None,
            listing_exchange: None,
            name: None,
            asset_class: None,
            expiry: None,
            last_trading_day: None,
            group: None,
            put_or_call: None,
            sector: None,
            sector_group: None,
            strike: None,
            ticker: None,
            und_conid: None,
            multiplier: None,
            r#type: None,
            und_comp: None,
            und_sym: None,
            has_options: None,
            full_name: None,
            is_us: None,
            increment_rules: None,
        }
    }
}

