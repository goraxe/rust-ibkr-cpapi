/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IserverAccountOrdersGet200ResponseOrdersInner {
    /// Account number
    #[serde(rename = "acct", skip_serializing_if = "Option::is_none")]
    pub acct: Option<String>,
    /// conid and exchange. Format supports conid or conid@exchange
    #[serde(rename = "conidex", skip_serializing_if = "Option::is_none")]
    pub conidex: Option<String>,
    /// Contract identifier
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<f64>,
    /// Order identifier
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Cash currency
    #[serde(rename = "cashCcy", skip_serializing_if = "Option::is_none")]
    pub cash_ccy: Option<String>,
    /// Quantity outstanding and total quantity concatenated with forward slash separator
    #[serde(rename = "sizeAndFills", skip_serializing_if = "Option::is_none")]
    pub size_and_fills: Option<String>,
    /// Order description
    #[serde(rename = "orderDesc", skip_serializing_if = "Option::is_none")]
    pub order_desc: Option<String>,
    /// Formatted ticker description
    #[serde(rename = "description1", skip_serializing_if = "Option::is_none")]
    pub description1: Option<String>,
    /// Underlying symbol
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Asset class
    #[serde(rename = "secType", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    /// Listing Exchange
    #[serde(rename = "listingExchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// Quantity remaining
    #[serde(rename = "remainingQuantity", skip_serializing_if = "Option::is_none")]
    pub remaining_quantity: Option<f64>,
    /// Quantity filled
    #[serde(rename = "filledQuantity", skip_serializing_if = "Option::is_none")]
    pub filled_quantity: Option<f64>,
    /// Company Name
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// Status of the order
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Original order type
    #[serde(rename = "origOrderType", skip_serializing_if = "Option::is_none")]
    pub orig_order_type: Option<String>,
    /// Supports Tax Optimization with 0 for no and 1 for yes
    #[serde(rename = "supportsTaxOpt", skip_serializing_if = "Option::is_none")]
    pub supports_tax_opt: Option<f64>,
    /// Last status update in format YYMMDDhhmms based in GMT
    #[serde(rename = "lastExecutionTime", skip_serializing_if = "Option::is_none")]
    pub last_execution_time: Option<f64>,
    /// Last status update unix time in ms
    #[serde(rename = "lastExecutionTime_r", skip_serializing_if = "Option::is_none")]
    pub last_execution_time_r: Option<f64>,
    /// Order type
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<String>,
    /// Order reference
    #[serde(rename = "order_ref", skip_serializing_if = "Option::is_none")]
    pub order_ref: Option<String>,
    /// The side of the market of the order.  * BUY: Buy contract near posted ask price  * SELL: Sell contract near posted bid price  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL 
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Time in force
    #[serde(rename = "timeInForce", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<String>,
    /// Price of order
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Background color in hex format
    #[serde(rename = "bgColor", skip_serializing_if = "Option::is_none")]
    pub bg_color: Option<String>,
    /// Foreground color in hex format
    #[serde(rename = "fgColor", skip_serializing_if = "Option::is_none")]
    pub fg_color: Option<String>,
}

impl IserverAccountOrdersGet200ResponseOrdersInner {
    pub fn new() -> IserverAccountOrdersGet200ResponseOrdersInner {
        IserverAccountOrdersGet200ResponseOrdersInner {
            acct: None,
            conidex: None,
            conid: None,
            order_id: None,
            cash_ccy: None,
            size_and_fills: None,
            order_desc: None,
            description1: None,
            ticker: None,
            sec_type: None,
            listing_exchange: None,
            remaining_quantity: None,
            filled_quantity: None,
            company_name: None,
            status: None,
            orig_order_type: None,
            supports_tax_opt: None,
            last_execution_time: None,
            last_execution_time_r: None,
            order_type: None,
            order_ref: None,
            side: None,
            time_in_force: None,
            price: None,
            bg_color: None,
            fg_color: None,
        }
    }
}
/// The side of the market of the order.  * BUY: Buy contract near posted ask price  * SELL: Sell contract near posted bid price  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "BUY")]
    Buy,
    #[serde(rename = "SELL")]
    Sell,
    #[serde(rename = "ASSN")]
    Assn,
    #[serde(rename = "EXER")]
    Exer,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}

