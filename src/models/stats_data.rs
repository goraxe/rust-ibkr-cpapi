/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatsData {
    #[serde(rename = "Conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<f64>,
    #[serde(rename = "Exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    #[serde(rename = "V", skip_serializing_if = "Option::is_none")]
    pub v: Option<f64>,
    #[serde(rename = "T", skip_serializing_if = "Option::is_none")]
    pub t: Option<f64>,
    #[serde(rename = "TT", skip_serializing_if = "Option::is_none")]
    pub tt: Option<f64>,
    /// Object, payload depends on event type. See confluence page for IGEvntUpd.
    #[serde(rename = "P", skip_serializing_if = "Option::is_none")]
    pub p: Option<String>,
}

impl StatsData {
    pub fn new() -> StatsData {
        StatsData {
            conid: None,
            exchange: None,
            v: None,
            t: None,
            tt: None,
            p: None,
        }
    }
}

