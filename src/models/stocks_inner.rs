/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// StocksInner : future contract information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StocksInner {
    /// company name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// company name in Chinese
    #[serde(rename = "chineseName", skip_serializing_if = "Option::is_none")]
    pub chinese_name: Option<String>,
    #[serde(rename = "assetClass", skip_serializing_if = "Option::is_none")]
    pub asset_class: Option<String>,
    /// array of contracts from different exchanges
    #[serde(rename = "contracts", skip_serializing_if = "Option::is_none")]
    pub contracts: Option<Vec<models::StocksInnerContractsInner>>,
}

impl StocksInner {
    /// future contract information
    pub fn new() -> StocksInner {
        StocksInner {
            name: None,
            chinese_name: None,
            asset_class: None,
            contracts: None,
        }
    }
}

