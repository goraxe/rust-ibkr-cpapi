/*
 * Client Portal Web API
 *
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PortfolioSubaccounts2Get200ResponseSubaccountsInner : Account information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PortfolioSubaccounts2Get200ResponseSubaccountsInner {
    /// The account identification value
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The account number
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// The accountAlias
    #[serde(rename = "accountVan", skip_serializing_if = "Option::is_none")]
    pub account_van: Option<String>,
    /// Title of the account
    #[serde(rename = "accountTitle", skip_serializing_if = "Option::is_none")]
    pub account_title: Option<String>,
    /// Whichever value is not null in this priority
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<DisplayName>,
    /// User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details.
    #[serde(rename = "accountAlias", skip_serializing_if = "Option::is_none")]
    pub account_alias: Option<String>,
    /// When the account was opened in unix time.
    #[serde(rename = "accountStatus", skip_serializing_if = "Option::is_none")]
    pub account_status: Option<f64>,
    /// Base currency of the account.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Currency>,
    /// Account Type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// UNI - Deprecated property
    #[serde(rename = "tradingType", skip_serializing_if = "Option::is_none")]
    pub trading_type: Option<String>,
    /// If an account is a sub-account to a Financial Advisor.
    #[serde(rename = "faclient", skip_serializing_if = "Option::is_none")]
    pub faclient: Option<bool>,
    /// Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed   covestor:     type: boolean     description: Is a Covestor Account   parent:     type: object     properties:       mmc:         type: array         items:           type: string           description: Money Manager Client (MMC) Account       accountId:         type: string         description: Account Number for Money Manager Client       isMParent:         type: boolean         description: Is MM a Parent Account       isMChild:         type: boolean         description: Is MM a Child Account       isMultiplex:         type: boolean         description: Is a Multiplex Account. These are account models with individual account being parent and managed account being child.   desc:     type: string     description: Formatted \"accountId - accountAlias\" 
    #[serde(rename = "clearingStatus", skip_serializing_if = "Option::is_none")]
    pub clearing_status: Option<ClearingStatus>,
}

impl PortfolioSubaccounts2Get200ResponseSubaccountsInner {
    /// Account information
    pub fn new() -> PortfolioSubaccounts2Get200ResponseSubaccountsInner {
        PortfolioSubaccounts2Get200ResponseSubaccountsInner {
            id: None,
            account_id: None,
            account_van: None,
            account_title: None,
            display_name: None,
            account_alias: None,
            account_status: None,
            currency: None,
            r#type: None,
            trading_type: None,
            faclient: None,
            clearing_status: None,
        }
    }
}
/// Whichever value is not null in this priority
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisplayName {
    #[serde(rename = "accountTitle")]
    AccountTitle,
    #[serde(rename = "accountVan")]
    AccountVan,
    #[serde(rename = "accountId")]
    AccountId,
}

impl Default for DisplayName {
    fn default() -> DisplayName {
        Self::AccountTitle
    }
}
/// Base currency of the account.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "AUD")]
    Aud,
    #[serde(rename = "GBP")]
    Gbp,
    #[serde(rename = "CAD")]
    Cad,
    #[serde(rename = "CNH")]
    Cnh,
    #[serde(rename = "CZK")]
    Czk,
    #[serde(rename = "DKK")]
    Dkk,
    #[serde(rename = "EUR")]
    Eur,
    #[serde(rename = "HKD")]
    Hkd,
    #[serde(rename = "HUF")]
    Huf,
    #[serde(rename = "INR")]
    Inr,
    #[serde(rename = "ILS")]
    Ils,
    #[serde(rename = "JPY")]
    Jpy,
    #[serde(rename = "MXN")]
    Mxn,
    #[serde(rename = "NOK")]
    Nok,
    #[serde(rename = "NZD")]
    Nzd,
    #[serde(rename = "PLN")]
    Pln,
    #[serde(rename = "RUB")]
    Rub,
    #[serde(rename = "SGD")]
    Sgd,
    #[serde(rename = "SEK")]
    Sek,
    #[serde(rename = "CHF")]
    Chf,
    #[serde(rename = "USD")]
    Usd,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Aud
    }
}
/// Account Type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "INDIVIDUAL")]
    Individual,
    #[serde(rename = "JOINT")]
    Joint,
    #[serde(rename = "ORG")]
    Org,
    #[serde(rename = "TRUST")]
    Trust,
    #[serde(rename = "DEMO")]
    Demo,
}

impl Default for Type {
    fn default() -> Type {
        Self::Individual
    }
}
/// Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed   covestor:     type: boolean     description: Is a Covestor Account   parent:     type: object     properties:       mmc:         type: array         items:           type: string           description: Money Manager Client (MMC) Account       accountId:         type: string         description: Account Number for Money Manager Client       isMParent:         type: boolean         description: Is MM a Parent Account       isMChild:         type: boolean         description: Is MM a Child Account       isMultiplex:         type: boolean         description: Is a Multiplex Account. These are account models with individual account being parent and managed account being child.   desc:     type: string     description: Formatted \"accountId - accountAlias\" 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClearingStatus {
    #[serde(rename = "O")]
    O,
    #[serde(rename = "P")]
    P,
    #[serde(rename = "N")]
    N,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "R")]
    R,
    #[serde(rename = "C")]
    C,
}

impl Default for ClearingStatus {
    fn default() -> ClearingStatus {
        Self::O
    }
}

